{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SimpleDashboard","title":"Home"},{"location":"#simpledashboard","text":"","title":"SimpleDashboard"},{"location":"reference/SimpleDashboard/","text":"Module SimpleDashboard View Source from .dashboard import Dashboard Sub-modules SimpleDashboard.dashboard SimpleDashboard.elements SimpleDashboard.tools","title":"Index"},{"location":"reference/SimpleDashboard/#module-simpledashboard","text":"View Source from .dashboard import Dashboard","title":"Module SimpleDashboard"},{"location":"reference/SimpleDashboard/#sub-modules","text":"SimpleDashboard.dashboard SimpleDashboard.elements SimpleDashboard.tools","title":"Sub-modules"},{"location":"reference/SimpleDashboard/dashboard/","text":"Module SimpleDashboard.dashboard View Source from flask import Flask , render_template from flask_socketio import SocketIO import xml.etree.ElementTree as ET from .elements import Grid class Dashboard (): def __init__ ( self , title = 'SimpleDashboard' , ip = '127.0.0.1' , port = 5000 ): self . app = Flask ( __name__ ) #app.config['SECRET_KEY'] = 'secret!' self . socketio = SocketIO ( self . app , async_mode = 'eventlet' ) self . grid = Grid () self . grid . register ( self . socketio ) self . elements = [] self . title = title self . ip = ip self . port = port @self.app.route ( '/' ) def home (): return render_template ( 'main.html' , title = self . title , content = self . generate_html (), js = self . generate_js ()) def run ( self ): self . grid . register ( self . socketio ) self . socketio . run ( self . app , '0.0.0.0' , self . port ) def add_element ( self , element ): self . grid . append_child ( element ) def add_script ( self , script ): self . scripts . append ( script ) def generate_html ( self ): return self . grid . get_html () def generate_js ( self ): return self . grid . get_js () Classes Dashboard class Dashboard ( title = 'SimpleDashboard' , ip = '127.0.0.1' , port = 5000 ) View Source class Dashboard () : def __init__ ( self , title = 'SimpleDashboard' , ip = '127.0.0.1' , port = 5000 ) : self . app = Flask ( __name__ ) #app . config [ 'SECRET_KEY' ] = 'secret!' self . socketio = SocketIO ( self . app , async_mode = 'eventlet' ) self . grid = Grid () self . grid . register ( self . socketio ) self . elements = [] self . title = title self . ip = ip self . port = port @self . app . route ( '/' ) def home () : return render_template ( 'main.html' , title = self . title , content = self . generate_html (), js = self . generate_js ()) def run ( self ) : self . grid . register ( self . socketio ) self . socketio . run ( self . app , '0.0.0.0' , self . port ) def add_element ( self , element ) : self . grid . append_child ( element ) def add_script ( self , script ) : self . scripts . append ( script ) def generate_html ( self ) : return self . grid . get_html () def generate_js ( self ) : return self . grid . get_js () Methods add_element def add_element ( self , element ) View Source def add_element ( self , element ): self . grid . append_child ( element ) add_script def add_script ( self , script ) View Source def add_script ( self , script ): self . scripts . append ( script ) generate_html def generate_html ( self ) View Source def generate_html ( self ): return self . grid . get_html () generate_js def generate_js ( self ) View Source def generate_js ( self ): return self . grid . get_js () run def run ( self ) View Source def run ( self ): self . grid . register ( self . socketio ) self . socketio . run ( self . app , '0.0.0.0' , self . port )","title":"Dashboard"},{"location":"reference/SimpleDashboard/dashboard/#module-simpledashboarddashboard","text":"View Source from flask import Flask , render_template from flask_socketio import SocketIO import xml.etree.ElementTree as ET from .elements import Grid class Dashboard (): def __init__ ( self , title = 'SimpleDashboard' , ip = '127.0.0.1' , port = 5000 ): self . app = Flask ( __name__ ) #app.config['SECRET_KEY'] = 'secret!' self . socketio = SocketIO ( self . app , async_mode = 'eventlet' ) self . grid = Grid () self . grid . register ( self . socketio ) self . elements = [] self . title = title self . ip = ip self . port = port @self.app.route ( '/' ) def home (): return render_template ( 'main.html' , title = self . title , content = self . generate_html (), js = self . generate_js ()) def run ( self ): self . grid . register ( self . socketio ) self . socketio . run ( self . app , '0.0.0.0' , self . port ) def add_element ( self , element ): self . grid . append_child ( element ) def add_script ( self , script ): self . scripts . append ( script ) def generate_html ( self ): return self . grid . get_html () def generate_js ( self ): return self . grid . get_js ()","title":"Module SimpleDashboard.dashboard"},{"location":"reference/SimpleDashboard/dashboard/#classes","text":"","title":"Classes"},{"location":"reference/SimpleDashboard/dashboard/#dashboard","text":"class Dashboard ( title = 'SimpleDashboard' , ip = '127.0.0.1' , port = 5000 ) View Source class Dashboard () : def __init__ ( self , title = 'SimpleDashboard' , ip = '127.0.0.1' , port = 5000 ) : self . app = Flask ( __name__ ) #app . config [ 'SECRET_KEY' ] = 'secret!' self . socketio = SocketIO ( self . app , async_mode = 'eventlet' ) self . grid = Grid () self . grid . register ( self . socketio ) self . elements = [] self . title = title self . ip = ip self . port = port @self . app . route ( '/' ) def home () : return render_template ( 'main.html' , title = self . title , content = self . generate_html (), js = self . generate_js ()) def run ( self ) : self . grid . register ( self . socketio ) self . socketio . run ( self . app , '0.0.0.0' , self . port ) def add_element ( self , element ) : self . grid . append_child ( element ) def add_script ( self , script ) : self . scripts . append ( script ) def generate_html ( self ) : return self . grid . get_html () def generate_js ( self ) : return self . grid . get_js ()","title":"Dashboard"},{"location":"reference/SimpleDashboard/dashboard/#methods","text":"","title":"Methods"},{"location":"reference/SimpleDashboard/dashboard/#add_element","text":"def add_element ( self , element ) View Source def add_element ( self , element ): self . grid . append_child ( element )","title":"add_element"},{"location":"reference/SimpleDashboard/dashboard/#add_script","text":"def add_script ( self , script ) View Source def add_script ( self , script ): self . scripts . append ( script )","title":"add_script"},{"location":"reference/SimpleDashboard/dashboard/#generate_html","text":"def generate_html ( self ) View Source def generate_html ( self ): return self . grid . get_html ()","title":"generate_html"},{"location":"reference/SimpleDashboard/dashboard/#generate_js","text":"def generate_js ( self ) View Source def generate_js ( self ): return self . grid . get_js ()","title":"generate_js"},{"location":"reference/SimpleDashboard/dashboard/#run","text":"def run ( self ) View Source def run ( self ): self . grid . register ( self . socketio ) self . socketio . run ( self . app , '0.0.0.0' , self . port )","title":"run"},{"location":"reference/SimpleDashboard/elements/","text":"Module SimpleDashboard.elements View Source from .label import Label from .button import Button from .paragraph import Paragraph from .card import Card from .header import Header from .card_title import CardTitle from .grid import Grid from . chart import Chart Sub-modules SimpleDashboard.elements.button SimpleDashboard.elements.card SimpleDashboard.elements.card_title SimpleDashboard.elements.chart SimpleDashboard.elements.element SimpleDashboard.elements.grid SimpleDashboard.elements.header SimpleDashboard.elements.label SimpleDashboard.elements.paragraph","title":"Index"},{"location":"reference/SimpleDashboard/elements/#module-simpledashboardelements","text":"View Source from .label import Label from .button import Button from .paragraph import Paragraph from .card import Card from .header import Header from .card_title import CardTitle from .grid import Grid from . chart import Chart","title":"Module SimpleDashboard.elements"},{"location":"reference/SimpleDashboard/elements/#sub-modules","text":"SimpleDashboard.elements.button SimpleDashboard.elements.card SimpleDashboard.elements.card_title SimpleDashboard.elements.chart SimpleDashboard.elements.element SimpleDashboard.elements.grid SimpleDashboard.elements.header SimpleDashboard.elements.label SimpleDashboard.elements.paragraph","title":"Sub-modules"},{"location":"reference/SimpleDashboard/elements/button/","text":"Module SimpleDashboard.elements.button View Source from .element import Element class Button ( Element ): def __init__ ( self , value , callback , * args , tag = 'button' , classes = [ 'uk-button' , 'uk-button-default' ], ** kwargs ): super () . __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value ) self . callback = callback def _on_register ( self ): self . _add_event_listener ( 'click' , self . callback ) Classes Button class Button ( value , callback , * args , tag = 'button' , classes = [ 'uk-button' , 'uk-button-default' ], ** kwargs ) View Source class Button ( Element ): def __init__ ( self , value , callback , * args , tag = 'button' , classes =[ 'uk-button' , 'uk-button-default' ], ** kwargs ): super (). __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value ) self . callback = callback def _on_register ( self ): self . _add_event_listener ( 'click' , self . callback ) Ancestors (in MRO) SimpleDashboard.elements.element.Element Methods append_child def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html ) get_element def get_element ( self ) View Source def get_element ( self ): return self . html get_html def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' ) get_js def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js register def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio ) update def update ( self , value ) View Source def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html )","title":"Button"},{"location":"reference/SimpleDashboard/elements/button/#module-simpledashboardelementsbutton","text":"View Source from .element import Element class Button ( Element ): def __init__ ( self , value , callback , * args , tag = 'button' , classes = [ 'uk-button' , 'uk-button-default' ], ** kwargs ): super () . __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value ) self . callback = callback def _on_register ( self ): self . _add_event_listener ( 'click' , self . callback )","title":"Module SimpleDashboard.elements.button"},{"location":"reference/SimpleDashboard/elements/button/#classes","text":"","title":"Classes"},{"location":"reference/SimpleDashboard/elements/button/#button","text":"class Button ( value , callback , * args , tag = 'button' , classes = [ 'uk-button' , 'uk-button-default' ], ** kwargs ) View Source class Button ( Element ): def __init__ ( self , value , callback , * args , tag = 'button' , classes =[ 'uk-button' , 'uk-button-default' ], ** kwargs ): super (). __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value ) self . callback = callback def _on_register ( self ): self . _add_event_listener ( 'click' , self . callback )","title":"Button"},{"location":"reference/SimpleDashboard/elements/button/#ancestors-in-mro","text":"SimpleDashboard.elements.element.Element","title":"Ancestors (in MRO)"},{"location":"reference/SimpleDashboard/elements/button/#methods","text":"","title":"Methods"},{"location":"reference/SimpleDashboard/elements/button/#append_child","text":"def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html )","title":"append_child"},{"location":"reference/SimpleDashboard/elements/button/#get_element","text":"def get_element ( self ) View Source def get_element ( self ): return self . html","title":"get_element"},{"location":"reference/SimpleDashboard/elements/button/#get_html","text":"def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' )","title":"get_html"},{"location":"reference/SimpleDashboard/elements/button/#get_js","text":"def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js","title":"get_js"},{"location":"reference/SimpleDashboard/elements/button/#register","text":"def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio )","title":"register"},{"location":"reference/SimpleDashboard/elements/button/#update","text":"def update ( self , value ) View Source def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html )","title":"update"},{"location":"reference/SimpleDashboard/elements/card/","text":"Module SimpleDashboard.elements.card View Source from .element import Element class Card ( Element ): def __init__ ( self , * args , tag = 'div' , classes = [ 'uk-card' , 'uk-card-default' , 'uk-card-body' ], ** kwargs ): super () . __init__ ( tag , classes , * args , ** kwargs ) Classes Card class Card ( * args , tag = 'div' , classes = [ 'uk-card' , 'uk-card-default' , 'uk-card-body' ], ** kwargs ) View Source class Card ( Element ): def __init__ ( self , * args , tag = 'div' , classes =[ 'uk-card' , 'uk-card-default' , 'uk-card-body' ], ** kwargs ): super (). __init__ ( tag , classes , * args , ** kwargs ) Ancestors (in MRO) SimpleDashboard.elements.element.Element Methods append_child def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html ) get_element def get_element ( self ) View Source def get_element ( self ): return self . html get_html def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' ) get_js def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js register def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio ) update def update ( self , value ) View Source def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html )","title":"Card"},{"location":"reference/SimpleDashboard/elements/card/#module-simpledashboardelementscard","text":"View Source from .element import Element class Card ( Element ): def __init__ ( self , * args , tag = 'div' , classes = [ 'uk-card' , 'uk-card-default' , 'uk-card-body' ], ** kwargs ): super () . __init__ ( tag , classes , * args , ** kwargs )","title":"Module SimpleDashboard.elements.card"},{"location":"reference/SimpleDashboard/elements/card/#classes","text":"","title":"Classes"},{"location":"reference/SimpleDashboard/elements/card/#card","text":"class Card ( * args , tag = 'div' , classes = [ 'uk-card' , 'uk-card-default' , 'uk-card-body' ], ** kwargs ) View Source class Card ( Element ): def __init__ ( self , * args , tag = 'div' , classes =[ 'uk-card' , 'uk-card-default' , 'uk-card-body' ], ** kwargs ): super (). __init__ ( tag , classes , * args , ** kwargs )","title":"Card"},{"location":"reference/SimpleDashboard/elements/card/#ancestors-in-mro","text":"SimpleDashboard.elements.element.Element","title":"Ancestors (in MRO)"},{"location":"reference/SimpleDashboard/elements/card/#methods","text":"","title":"Methods"},{"location":"reference/SimpleDashboard/elements/card/#append_child","text":"def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html )","title":"append_child"},{"location":"reference/SimpleDashboard/elements/card/#get_element","text":"def get_element ( self ) View Source def get_element ( self ): return self . html","title":"get_element"},{"location":"reference/SimpleDashboard/elements/card/#get_html","text":"def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' )","title":"get_html"},{"location":"reference/SimpleDashboard/elements/card/#get_js","text":"def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js","title":"get_js"},{"location":"reference/SimpleDashboard/elements/card/#register","text":"def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio )","title":"register"},{"location":"reference/SimpleDashboard/elements/card/#update","text":"def update ( self , value ) View Source def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html )","title":"update"},{"location":"reference/SimpleDashboard/elements/card_title/","text":"Module SimpleDashboard.elements.card_title View Source from .element import Element class CardTitle ( Element ): def __init__ ( self , value , * args , tag = 'h3' , classes = [ 'uk-card-title' ], ** kwargs ): super () . __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value ) Classes CardTitle class CardTitle ( value , * args , tag = 'h3' , classes = [ 'uk-card-title' ], ** kwargs ) View Source class CardTitle ( Element ): def __init__ ( self , value , * args , tag = 'h3' , classes =[ 'uk-card-title' ], ** kwargs ): super (). __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value ) Ancestors (in MRO) SimpleDashboard.elements.element.Element Methods append_child def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html ) get_element def get_element ( self ) View Source def get_element ( self ): return self . html get_html def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' ) get_js def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js register def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio ) update def update ( self , value ) View Source def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html )","title":"Card Title"},{"location":"reference/SimpleDashboard/elements/card_title/#module-simpledashboardelementscard_title","text":"View Source from .element import Element class CardTitle ( Element ): def __init__ ( self , value , * args , tag = 'h3' , classes = [ 'uk-card-title' ], ** kwargs ): super () . __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value )","title":"Module SimpleDashboard.elements.card_title"},{"location":"reference/SimpleDashboard/elements/card_title/#classes","text":"","title":"Classes"},{"location":"reference/SimpleDashboard/elements/card_title/#cardtitle","text":"class CardTitle ( value , * args , tag = 'h3' , classes = [ 'uk-card-title' ], ** kwargs ) View Source class CardTitle ( Element ): def __init__ ( self , value , * args , tag = 'h3' , classes =[ 'uk-card-title' ], ** kwargs ): super (). __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value )","title":"CardTitle"},{"location":"reference/SimpleDashboard/elements/card_title/#ancestors-in-mro","text":"SimpleDashboard.elements.element.Element","title":"Ancestors (in MRO)"},{"location":"reference/SimpleDashboard/elements/card_title/#methods","text":"","title":"Methods"},{"location":"reference/SimpleDashboard/elements/card_title/#append_child","text":"def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html )","title":"append_child"},{"location":"reference/SimpleDashboard/elements/card_title/#get_element","text":"def get_element ( self ) View Source def get_element ( self ): return self . html","title":"get_element"},{"location":"reference/SimpleDashboard/elements/card_title/#get_html","text":"def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' )","title":"get_html"},{"location":"reference/SimpleDashboard/elements/card_title/#get_js","text":"def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js","title":"get_js"},{"location":"reference/SimpleDashboard/elements/card_title/#register","text":"def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio )","title":"register"},{"location":"reference/SimpleDashboard/elements/card_title/#update","text":"def update ( self , value ) View Source def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html )","title":"update"},{"location":"reference/SimpleDashboard/elements/chart/","text":"Module SimpleDashboard.elements.chart View Source from .element import Element class Chart ( Element ): def __init__ ( self , x = None , y = [], * args , tag = 'div' , classes = [], mode = 'lines+markers' , title = '' , persistent = True , xlabel = '' , ylabel = '' , ** kwargs ): super () . __init__ ( tag , classes , * args , ** kwargs ) self . persistent = persistent self . mode = mode self . title = title self . xlabel = xlabel self . ylabel = ylabel self . x_start = x self . x = x self . y = y self . __generate_js () def __generate_js ( self ): x_js = '' x_data_js = '' if self . x != None : x_js = 'x: ' + str ( self . x ) + ',' x_data_js = 'x: [data[\"x\"]],' self . js = ( 'Plotly.newPlot( \"' + str ( self . id ) + '\", [{' '' + x_js + '' 'y: ' + str ( self . y ) + ',' 'mode: \"' + self . mode + '\",' 'title: \"' + self . title + '\"' ' }], {' 'xaxis: { title: \"' + self . xlabel + '\" },' 'yaxis: { title: \"' + self . ylabel + '\" },' '}, {responsive: true} );' 'socket.on(\"' + str ( self . id ) + '_update\",' 'function(data){' 'Plotly.extendTraces(\"' + str ( self . id ) + '\", {' '' + x_data_js + '' 'y: [data[\"y\"]]' '}, [0])});' 'socket.on(\"' + str ( self . id ) + '_clear\",' 'function(){' 'Plotly.newPlot( \"' + str ( self . id ) + '\", [{' '' + x_js + '' 'y: ' + str ( self . y ) + ',' 'mode: \"' + self . mode + '\",' 'title: \"' + self . title + '\"' ' }], {' 'xaxis: { title: \"' + self . xlabel + '\" },' 'yaxis: { title: \"' + self . ylabel + '\" },' '}, {responsive: true} );' '});' ) def update ( self , x = [], y = []): if isinstance ( x , list ) is False : x = [ x ] if isinstance ( y , list ) is False : y = [ y ] if self . persistent : if self . x is not None : self . x . append ( x [ 0 ]) self . y . append ( y [ 0 ]) self . socketio . emit ( str ( self . id ) + '_update' , { 'x' : x , 'y' : y }) self . __generate_js () def clear ( self ): self . x = self . x_start self . y = [] self . socketio . emit ( str ( self . id ) + '_clear' ) Classes Chart class Chart ( x = None , y = [], * args , tag = 'div' , classes = [], mode = 'lines+markers' , title = '' , persistent = True , xlabel = '' , ylabel = '' , ** kwargs ) View Source class Chart ( Element ) : def __init__ ( self , x = None , y = [] , * args , tag = 'div' , classes = [] , mode = 'lines+markers' , title = '' , persistent = True , xlabel = '' , ylabel = '' , ** kwargs ) : super (). __init__ ( tag , classes , * args , ** kwargs ) self . persistent = persistent self . mode = mode self . title = title self . xlabel = xlabel self . ylabel = ylabel self . x_start = x self . x = x self . y = y self . __generate_js () def __generate_js ( self ) : x_js = '' x_data_js = '' if self . x != None : x_js = 'x: ' + str ( self . x ) + ',' x_data_js = 'x: [data[\"x\"]],' self . js = ( 'Plotly.newPlot( \"' + str ( self . id ) + '\", [{' '' + x_js + '' 'y: ' + str ( self . y ) + ',' 'mode: \"' + self . mode + '\",' 'title: \"' + self . title + '\"' ' }], {' 'xaxis: { title: \"' + self . xlabel + '\" },' 'yaxis: { title: \"' + self . ylabel + '\" },' '}, {responsive: true} );' 'socket.on(\"' + str ( self . id ) + '_update\",' 'function(data){' 'Plotly.extendTraces(\"' + str ( self . id ) + '\", {' '' + x_data_js + '' 'y: [data[\"y\"]]' '}, [0])});' 'socket.on(\"' + str ( self . id ) + '_clear\",' 'function(){' 'Plotly.newPlot( \"' + str ( self . id ) + '\", [{' '' + x_js + '' 'y: ' + str ( self . y ) + ',' 'mode: \"' + self . mode + '\",' 'title: \"' + self . title + '\"' ' }], {' 'xaxis: { title: \"' + self . xlabel + '\" },' 'yaxis: { title: \"' + self . ylabel + '\" },' '}, {responsive: true} );' '});' ) def update ( self , x = [] , y = [] ) : if isinstance ( x , list ) is False : x = [ x ] if isinstance ( y , list ) is False : y = [ y ] if self . persistent : if self . x is not None : self . x . append ( x [ 0 ] ) self . y . append ( y [ 0 ] ) self . socketio . emit ( str ( self . id ) + '_update' , { 'x' : x , 'y' : y } ) self . __generate_js () def clear ( self ) : self . x = self . x_start self . y = [] self . socketio . emit ( str ( self . id ) + '_clear' ) Ancestors (in MRO) SimpleDashboard.elements.element.Element Methods append_child def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html ) clear def clear ( self ) View Source def clear ( self ): self . x = self . x_start self . y = [] self . socketio . emit ( str ( self . id ) + '_clear' ) get_element def get_element ( self ) View Source def get_element ( self ): return self . html get_html def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' ) get_js def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js register def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio ) update def update ( self , x = [], y = [] ) View Source def update ( self , x = [] , y = [] ) : if isinstance ( x , list ) is False : x = [ x ] if isinstance ( y , list ) is False : y = [ y ] if self . persistent : if self . x is not None : self . x . append ( x [ 0 ] ) self . y . append ( y [ 0 ] ) self . socketio . emit ( str ( self . id ) + '_update' , { 'x' : x , 'y' : y } ) self . __generate_js ()","title":"Chart"},{"location":"reference/SimpleDashboard/elements/chart/#module-simpledashboardelementschart","text":"View Source from .element import Element class Chart ( Element ): def __init__ ( self , x = None , y = [], * args , tag = 'div' , classes = [], mode = 'lines+markers' , title = '' , persistent = True , xlabel = '' , ylabel = '' , ** kwargs ): super () . __init__ ( tag , classes , * args , ** kwargs ) self . persistent = persistent self . mode = mode self . title = title self . xlabel = xlabel self . ylabel = ylabel self . x_start = x self . x = x self . y = y self . __generate_js () def __generate_js ( self ): x_js = '' x_data_js = '' if self . x != None : x_js = 'x: ' + str ( self . x ) + ',' x_data_js = 'x: [data[\"x\"]],' self . js = ( 'Plotly.newPlot( \"' + str ( self . id ) + '\", [{' '' + x_js + '' 'y: ' + str ( self . y ) + ',' 'mode: \"' + self . mode + '\",' 'title: \"' + self . title + '\"' ' }], {' 'xaxis: { title: \"' + self . xlabel + '\" },' 'yaxis: { title: \"' + self . ylabel + '\" },' '}, {responsive: true} );' 'socket.on(\"' + str ( self . id ) + '_update\",' 'function(data){' 'Plotly.extendTraces(\"' + str ( self . id ) + '\", {' '' + x_data_js + '' 'y: [data[\"y\"]]' '}, [0])});' 'socket.on(\"' + str ( self . id ) + '_clear\",' 'function(){' 'Plotly.newPlot( \"' + str ( self . id ) + '\", [{' '' + x_js + '' 'y: ' + str ( self . y ) + ',' 'mode: \"' + self . mode + '\",' 'title: \"' + self . title + '\"' ' }], {' 'xaxis: { title: \"' + self . xlabel + '\" },' 'yaxis: { title: \"' + self . ylabel + '\" },' '}, {responsive: true} );' '});' ) def update ( self , x = [], y = []): if isinstance ( x , list ) is False : x = [ x ] if isinstance ( y , list ) is False : y = [ y ] if self . persistent : if self . x is not None : self . x . append ( x [ 0 ]) self . y . append ( y [ 0 ]) self . socketio . emit ( str ( self . id ) + '_update' , { 'x' : x , 'y' : y }) self . __generate_js () def clear ( self ): self . x = self . x_start self . y = [] self . socketio . emit ( str ( self . id ) + '_clear' )","title":"Module SimpleDashboard.elements.chart"},{"location":"reference/SimpleDashboard/elements/chart/#classes","text":"","title":"Classes"},{"location":"reference/SimpleDashboard/elements/chart/#chart","text":"class Chart ( x = None , y = [], * args , tag = 'div' , classes = [], mode = 'lines+markers' , title = '' , persistent = True , xlabel = '' , ylabel = '' , ** kwargs ) View Source class Chart ( Element ) : def __init__ ( self , x = None , y = [] , * args , tag = 'div' , classes = [] , mode = 'lines+markers' , title = '' , persistent = True , xlabel = '' , ylabel = '' , ** kwargs ) : super (). __init__ ( tag , classes , * args , ** kwargs ) self . persistent = persistent self . mode = mode self . title = title self . xlabel = xlabel self . ylabel = ylabel self . x_start = x self . x = x self . y = y self . __generate_js () def __generate_js ( self ) : x_js = '' x_data_js = '' if self . x != None : x_js = 'x: ' + str ( self . x ) + ',' x_data_js = 'x: [data[\"x\"]],' self . js = ( 'Plotly.newPlot( \"' + str ( self . id ) + '\", [{' '' + x_js + '' 'y: ' + str ( self . y ) + ',' 'mode: \"' + self . mode + '\",' 'title: \"' + self . title + '\"' ' }], {' 'xaxis: { title: \"' + self . xlabel + '\" },' 'yaxis: { title: \"' + self . ylabel + '\" },' '}, {responsive: true} );' 'socket.on(\"' + str ( self . id ) + '_update\",' 'function(data){' 'Plotly.extendTraces(\"' + str ( self . id ) + '\", {' '' + x_data_js + '' 'y: [data[\"y\"]]' '}, [0])});' 'socket.on(\"' + str ( self . id ) + '_clear\",' 'function(){' 'Plotly.newPlot( \"' + str ( self . id ) + '\", [{' '' + x_js + '' 'y: ' + str ( self . y ) + ',' 'mode: \"' + self . mode + '\",' 'title: \"' + self . title + '\"' ' }], {' 'xaxis: { title: \"' + self . xlabel + '\" },' 'yaxis: { title: \"' + self . ylabel + '\" },' '}, {responsive: true} );' '});' ) def update ( self , x = [] , y = [] ) : if isinstance ( x , list ) is False : x = [ x ] if isinstance ( y , list ) is False : y = [ y ] if self . persistent : if self . x is not None : self . x . append ( x [ 0 ] ) self . y . append ( y [ 0 ] ) self . socketio . emit ( str ( self . id ) + '_update' , { 'x' : x , 'y' : y } ) self . __generate_js () def clear ( self ) : self . x = self . x_start self . y = [] self . socketio . emit ( str ( self . id ) + '_clear' )","title":"Chart"},{"location":"reference/SimpleDashboard/elements/chart/#ancestors-in-mro","text":"SimpleDashboard.elements.element.Element","title":"Ancestors (in MRO)"},{"location":"reference/SimpleDashboard/elements/chart/#methods","text":"","title":"Methods"},{"location":"reference/SimpleDashboard/elements/chart/#append_child","text":"def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html )","title":"append_child"},{"location":"reference/SimpleDashboard/elements/chart/#clear","text":"def clear ( self ) View Source def clear ( self ): self . x = self . x_start self . y = [] self . socketio . emit ( str ( self . id ) + '_clear' )","title":"clear"},{"location":"reference/SimpleDashboard/elements/chart/#get_element","text":"def get_element ( self ) View Source def get_element ( self ): return self . html","title":"get_element"},{"location":"reference/SimpleDashboard/elements/chart/#get_html","text":"def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' )","title":"get_html"},{"location":"reference/SimpleDashboard/elements/chart/#get_js","text":"def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js","title":"get_js"},{"location":"reference/SimpleDashboard/elements/chart/#register","text":"def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio )","title":"register"},{"location":"reference/SimpleDashboard/elements/chart/#update","text":"def update ( self , x = [], y = [] ) View Source def update ( self , x = [] , y = [] ) : if isinstance ( x , list ) is False : x = [ x ] if isinstance ( y , list ) is False : y = [ y ] if self . persistent : if self . x is not None : self . x . append ( x [ 0 ] ) self . y . append ( y [ 0 ] ) self . socketio . emit ( str ( self . id ) + '_update' , { 'x' : x , 'y' : y } ) self . __generate_js ()","title":"update"},{"location":"reference/SimpleDashboard/elements/element/","text":"Module SimpleDashboard.elements.element View Source import xml.etree.ElementTree as ET import copy import base64 class Element (): def __init__ ( self , tag , classes , * args , width = '1-1' , unit = None , digits = None , ** kwargs ): self . id = id ( self ) self . string_id = base64 . b32encode ( str ( self . id ) . encode ()) . decode () self . tag = copy . copy ( tag ) self . classes = copy . copy ( classes ) self . classes . append ( 'uk-width-' + width ) self . unit = unit self . digits = digits self . children = [] self . et = ET self . socketio = None self . registered = False self . html = self . et . Element ( self . tag , attrib = { 'id' : str ( self . id ), 'class' : ' ' . join ( self . classes )}) self . js = 'socket.on(\"' + str ( self . id ) + '_update\", function(data){document.getElementById(\"' + str ( self . id ) + '\").innerHTML=data});' def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio ) def _on_register ( self ): pass def _add_event_listener ( self , event , callback ): self . js += 'document.getElementById(\"' + str ( self . id ) + '\").addEventListener(\"' + str ( event ) + '\", function() {socket.emit(\"' + str ( self . id ) + '_' + event + '\")});' self . socketio . on_event ( str ( self . id ) + '_' + str ( event ), callback ) def _generate_inner_html ( self , value ): if isinstance ( value , str ): return value elif isinstance ( value , int ) or isinstance ( value , float ): return_value = value if self . digits is not None : return_value = round ( return_value , self . digits ) return_value = str ( return_value ) if self . unit is not None : return_value += ' ' + self . unit return return_value else : return str ( value ) def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html ) def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html ) def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ) . decode ( 'UTF-8' ) def get_element ( self ): return self . html def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + ' \\n ' return js Classes Element class Element ( tag , classes , * args , width = '1-1' , unit = None , digits = None , ** kwargs ) View Source class Element (): def __init__ ( self , tag , classes , * args , width = '1-1' , unit = None , digits = None , ** kwargs ): self . id = id ( self ) self . string_id = base64 . b32encode ( str ( self . id ). encode ()). decode () self . tag = copy . copy ( tag ) self . classes = copy . copy ( classes ) self . classes . append ( 'uk-width-' + width ) self . unit = unit self . digits = digits self . children = [] self . et = ET self . socketio = None self . registered = False self . html = self . et . Element ( self . tag , attrib ={ 'id' : str ( self . id ), 'class' : ' ' . join ( self . classes )}) self . js = 'socket.on(\"' + str ( self . id )+ '_update\", function(data){document.getElementById(\"' + str ( self . id )+ '\").innerHTML=data});' def register ( self , socketio ): if socketio is not None: if self . registered is False: self . socketio = socketio self . _on_register () self . registered = True for child in self . children: child . register ( self . socketio ) def _on_register ( self ): pass def _add_event_listener ( self , event , callback ): self . js += 'document.getElementById(\"' + str ( self . id )+ '\").addEventListener(\"' + str ( event ) + '\", function() {socket.emit(\"' + str ( self . id )+ '_' + event + '\")});' self . socketio . on_event ( str ( self . id )+ '_' + str ( event ), callback ) def _generate_inner_html ( self , value ): if isinstance ( value , str ): return value elif isinstance ( value , int ) or isinstance ( value , float ): return_value = value if self . digits is not None: return_value = round ( return_value , self . digits ) return_value = str ( return_value ) if self . unit is not None: return_value += ' ' + self . unit return return_value else: return str ( value ) def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id )+ '_update' , inner_html ) def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html ) def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' ) def get_element ( self ): return self . html def get_js ( self ): js = copy . copy ( self . js ) for child in self . children: js += child . get_js () + '\\n' return js Descendants SimpleDashboard.elements.label.Label SimpleDashboard.elements.button.Button SimpleDashboard.elements.paragraph.Paragraph SimpleDashboard.elements.card.Card SimpleDashboard.elements.header.Header SimpleDashboard.elements.card_title.CardTitle SimpleDashboard.elements.grid.Grid SimpleDashboard.elements.chart.Chart Methods append_child def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html ) get_element def get_element ( self ) View Source def get_element ( self ): return self . html get_html def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' ) get_js def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js register def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio ) update def update ( self , value ) View Source def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html )","title":"Element"},{"location":"reference/SimpleDashboard/elements/element/#module-simpledashboardelementselement","text":"View Source import xml.etree.ElementTree as ET import copy import base64 class Element (): def __init__ ( self , tag , classes , * args , width = '1-1' , unit = None , digits = None , ** kwargs ): self . id = id ( self ) self . string_id = base64 . b32encode ( str ( self . id ) . encode ()) . decode () self . tag = copy . copy ( tag ) self . classes = copy . copy ( classes ) self . classes . append ( 'uk-width-' + width ) self . unit = unit self . digits = digits self . children = [] self . et = ET self . socketio = None self . registered = False self . html = self . et . Element ( self . tag , attrib = { 'id' : str ( self . id ), 'class' : ' ' . join ( self . classes )}) self . js = 'socket.on(\"' + str ( self . id ) + '_update\", function(data){document.getElementById(\"' + str ( self . id ) + '\").innerHTML=data});' def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio ) def _on_register ( self ): pass def _add_event_listener ( self , event , callback ): self . js += 'document.getElementById(\"' + str ( self . id ) + '\").addEventListener(\"' + str ( event ) + '\", function() {socket.emit(\"' + str ( self . id ) + '_' + event + '\")});' self . socketio . on_event ( str ( self . id ) + '_' + str ( event ), callback ) def _generate_inner_html ( self , value ): if isinstance ( value , str ): return value elif isinstance ( value , int ) or isinstance ( value , float ): return_value = value if self . digits is not None : return_value = round ( return_value , self . digits ) return_value = str ( return_value ) if self . unit is not None : return_value += ' ' + self . unit return return_value else : return str ( value ) def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html ) def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html ) def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ) . decode ( 'UTF-8' ) def get_element ( self ): return self . html def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + ' \\n ' return js","title":"Module SimpleDashboard.elements.element"},{"location":"reference/SimpleDashboard/elements/element/#classes","text":"","title":"Classes"},{"location":"reference/SimpleDashboard/elements/element/#element","text":"class Element ( tag , classes , * args , width = '1-1' , unit = None , digits = None , ** kwargs ) View Source class Element (): def __init__ ( self , tag , classes , * args , width = '1-1' , unit = None , digits = None , ** kwargs ): self . id = id ( self ) self . string_id = base64 . b32encode ( str ( self . id ). encode ()). decode () self . tag = copy . copy ( tag ) self . classes = copy . copy ( classes ) self . classes . append ( 'uk-width-' + width ) self . unit = unit self . digits = digits self . children = [] self . et = ET self . socketio = None self . registered = False self . html = self . et . Element ( self . tag , attrib ={ 'id' : str ( self . id ), 'class' : ' ' . join ( self . classes )}) self . js = 'socket.on(\"' + str ( self . id )+ '_update\", function(data){document.getElementById(\"' + str ( self . id )+ '\").innerHTML=data});' def register ( self , socketio ): if socketio is not None: if self . registered is False: self . socketio = socketio self . _on_register () self . registered = True for child in self . children: child . register ( self . socketio ) def _on_register ( self ): pass def _add_event_listener ( self , event , callback ): self . js += 'document.getElementById(\"' + str ( self . id )+ '\").addEventListener(\"' + str ( event ) + '\", function() {socket.emit(\"' + str ( self . id )+ '_' + event + '\")});' self . socketio . on_event ( str ( self . id )+ '_' + str ( event ), callback ) def _generate_inner_html ( self , value ): if isinstance ( value , str ): return value elif isinstance ( value , int ) or isinstance ( value , float ): return_value = value if self . digits is not None: return_value = round ( return_value , self . digits ) return_value = str ( return_value ) if self . unit is not None: return_value += ' ' + self . unit return return_value else: return str ( value ) def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id )+ '_update' , inner_html ) def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html ) def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' ) def get_element ( self ): return self . html def get_js ( self ): js = copy . copy ( self . js ) for child in self . children: js += child . get_js () + '\\n' return js","title":"Element"},{"location":"reference/SimpleDashboard/elements/element/#descendants","text":"SimpleDashboard.elements.label.Label SimpleDashboard.elements.button.Button SimpleDashboard.elements.paragraph.Paragraph SimpleDashboard.elements.card.Card SimpleDashboard.elements.header.Header SimpleDashboard.elements.card_title.CardTitle SimpleDashboard.elements.grid.Grid SimpleDashboard.elements.chart.Chart","title":"Descendants"},{"location":"reference/SimpleDashboard/elements/element/#methods","text":"","title":"Methods"},{"location":"reference/SimpleDashboard/elements/element/#append_child","text":"def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html )","title":"append_child"},{"location":"reference/SimpleDashboard/elements/element/#get_element","text":"def get_element ( self ) View Source def get_element ( self ): return self . html","title":"get_element"},{"location":"reference/SimpleDashboard/elements/element/#get_html","text":"def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' )","title":"get_html"},{"location":"reference/SimpleDashboard/elements/element/#get_js","text":"def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js","title":"get_js"},{"location":"reference/SimpleDashboard/elements/element/#register","text":"def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio )","title":"register"},{"location":"reference/SimpleDashboard/elements/element/#update","text":"def update ( self , value ) View Source def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html )","title":"update"},{"location":"reference/SimpleDashboard/elements/grid/","text":"Module SimpleDashboard.elements.grid View Source from .element import Element class Grid ( Element ): def __init__ ( self , * args , tag = 'uk-grid' , classes = [ 'uk-grid uk-child-width-expand@s' , 'uk-text-center' , 'uk-grid-medium' ], ** kwargs ): super () . __init__ ( tag , classes , * args , ** kwargs ) Classes Grid class Grid ( * args , tag = 'uk-grid' , classes = [ 'uk-grid uk-child-width-expand@s' , 'uk-text-center' , 'uk-grid-medium' ], ** kwargs ) View Source class Grid ( Element ) : def __init__ ( self , * args , tag = 'uk-grid' , classes =[ 'uk-grid uk-child-width-expand@s', 'uk-text-center', 'uk-grid-medium' ] , ** kwargs ) : super (). __init__ ( tag , classes , * args , ** kwargs ) Ancestors (in MRO) SimpleDashboard.elements.element.Element Methods append_child def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html ) get_element def get_element ( self ) View Source def get_element ( self ): return self . html get_html def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' ) get_js def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js register def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio ) update def update ( self , value ) View Source def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html )","title":"Grid"},{"location":"reference/SimpleDashboard/elements/grid/#module-simpledashboardelementsgrid","text":"View Source from .element import Element class Grid ( Element ): def __init__ ( self , * args , tag = 'uk-grid' , classes = [ 'uk-grid uk-child-width-expand@s' , 'uk-text-center' , 'uk-grid-medium' ], ** kwargs ): super () . __init__ ( tag , classes , * args , ** kwargs )","title":"Module SimpleDashboard.elements.grid"},{"location":"reference/SimpleDashboard/elements/grid/#classes","text":"","title":"Classes"},{"location":"reference/SimpleDashboard/elements/grid/#grid","text":"class Grid ( * args , tag = 'uk-grid' , classes = [ 'uk-grid uk-child-width-expand@s' , 'uk-text-center' , 'uk-grid-medium' ], ** kwargs ) View Source class Grid ( Element ) : def __init__ ( self , * args , tag = 'uk-grid' , classes =[ 'uk-grid uk-child-width-expand@s', 'uk-text-center', 'uk-grid-medium' ] , ** kwargs ) : super (). __init__ ( tag , classes , * args , ** kwargs )","title":"Grid"},{"location":"reference/SimpleDashboard/elements/grid/#ancestors-in-mro","text":"SimpleDashboard.elements.element.Element","title":"Ancestors (in MRO)"},{"location":"reference/SimpleDashboard/elements/grid/#methods","text":"","title":"Methods"},{"location":"reference/SimpleDashboard/elements/grid/#append_child","text":"def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html )","title":"append_child"},{"location":"reference/SimpleDashboard/elements/grid/#get_element","text":"def get_element ( self ) View Source def get_element ( self ): return self . html","title":"get_element"},{"location":"reference/SimpleDashboard/elements/grid/#get_html","text":"def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' )","title":"get_html"},{"location":"reference/SimpleDashboard/elements/grid/#get_js","text":"def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js","title":"get_js"},{"location":"reference/SimpleDashboard/elements/grid/#register","text":"def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio )","title":"register"},{"location":"reference/SimpleDashboard/elements/grid/#update","text":"def update ( self , value ) View Source def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html )","title":"update"},{"location":"reference/SimpleDashboard/elements/header/","text":"Module SimpleDashboard.elements.header View Source from .element import Element class Header ( Element ): def __init__ ( self , value , * args , tag = 'h1' , classes = [], ** kwargs ): super () . __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value ) Classes Header class Header ( value , * args , tag = 'h1' , classes = [], ** kwargs ) View Source class Header ( Element ): def __init__ ( self , value , * args , tag = 'h1' , classes =[], ** kwargs ): super (). __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value ) Ancestors (in MRO) SimpleDashboard.elements.element.Element Methods append_child def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html ) get_element def get_element ( self ) View Source def get_element ( self ): return self . html get_html def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' ) get_js def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js register def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio ) update def update ( self , value ) View Source def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html )","title":"Header"},{"location":"reference/SimpleDashboard/elements/header/#module-simpledashboardelementsheader","text":"View Source from .element import Element class Header ( Element ): def __init__ ( self , value , * args , tag = 'h1' , classes = [], ** kwargs ): super () . __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value )","title":"Module SimpleDashboard.elements.header"},{"location":"reference/SimpleDashboard/elements/header/#classes","text":"","title":"Classes"},{"location":"reference/SimpleDashboard/elements/header/#header","text":"class Header ( value , * args , tag = 'h1' , classes = [], ** kwargs ) View Source class Header ( Element ): def __init__ ( self , value , * args , tag = 'h1' , classes =[], ** kwargs ): super (). __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value )","title":"Header"},{"location":"reference/SimpleDashboard/elements/header/#ancestors-in-mro","text":"SimpleDashboard.elements.element.Element","title":"Ancestors (in MRO)"},{"location":"reference/SimpleDashboard/elements/header/#methods","text":"","title":"Methods"},{"location":"reference/SimpleDashboard/elements/header/#append_child","text":"def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html )","title":"append_child"},{"location":"reference/SimpleDashboard/elements/header/#get_element","text":"def get_element ( self ) View Source def get_element ( self ): return self . html","title":"get_element"},{"location":"reference/SimpleDashboard/elements/header/#get_html","text":"def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' )","title":"get_html"},{"location":"reference/SimpleDashboard/elements/header/#get_js","text":"def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js","title":"get_js"},{"location":"reference/SimpleDashboard/elements/header/#register","text":"def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio )","title":"register"},{"location":"reference/SimpleDashboard/elements/header/#update","text":"def update ( self , value ) View Source def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html )","title":"update"},{"location":"reference/SimpleDashboard/elements/label/","text":"Module SimpleDashboard.elements.label View Source from .element import Element class Label ( Element ): def __init__ ( self , value , * args , tag = 'span' , classes = [ 'uk-label' ], ** kwargs ): super () . __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value ) Classes Label class Label ( value , * args , tag = 'span' , classes = [ 'uk-label' ], ** kwargs ) View Source class Label ( Element ): def __init__ ( self , value , * args , tag = 'span' , classes =[ 'uk-label' ], ** kwargs ): super (). __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value ) Ancestors (in MRO) SimpleDashboard.elements.element.Element Methods append_child def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html ) get_element def get_element ( self ) View Source def get_element ( self ): return self . html get_html def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' ) get_js def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js register def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio ) update def update ( self , value ) View Source def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html )","title":"Label"},{"location":"reference/SimpleDashboard/elements/label/#module-simpledashboardelementslabel","text":"View Source from .element import Element class Label ( Element ): def __init__ ( self , value , * args , tag = 'span' , classes = [ 'uk-label' ], ** kwargs ): super () . __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value )","title":"Module SimpleDashboard.elements.label"},{"location":"reference/SimpleDashboard/elements/label/#classes","text":"","title":"Classes"},{"location":"reference/SimpleDashboard/elements/label/#label","text":"class Label ( value , * args , tag = 'span' , classes = [ 'uk-label' ], ** kwargs ) View Source class Label ( Element ): def __init__ ( self , value , * args , tag = 'span' , classes =[ 'uk-label' ], ** kwargs ): super (). __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value )","title":"Label"},{"location":"reference/SimpleDashboard/elements/label/#ancestors-in-mro","text":"SimpleDashboard.elements.element.Element","title":"Ancestors (in MRO)"},{"location":"reference/SimpleDashboard/elements/label/#methods","text":"","title":"Methods"},{"location":"reference/SimpleDashboard/elements/label/#append_child","text":"def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html )","title":"append_child"},{"location":"reference/SimpleDashboard/elements/label/#get_element","text":"def get_element ( self ) View Source def get_element ( self ): return self . html","title":"get_element"},{"location":"reference/SimpleDashboard/elements/label/#get_html","text":"def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' )","title":"get_html"},{"location":"reference/SimpleDashboard/elements/label/#get_js","text":"def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js","title":"get_js"},{"location":"reference/SimpleDashboard/elements/label/#register","text":"def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio )","title":"register"},{"location":"reference/SimpleDashboard/elements/label/#update","text":"def update ( self , value ) View Source def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html )","title":"update"},{"location":"reference/SimpleDashboard/elements/paragraph/","text":"Module SimpleDashboard.elements.paragraph View Source from .element import Element class Paragraph ( Element ): def __init__ ( self , value , * args , tag = 'p' , classes = [], ** kwargs ): super () . __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value ) Classes Paragraph class Paragraph ( value , * args , tag = 'p' , classes = [], ** kwargs ) View Source class Paragraph ( Element ): def __init__ ( self , value , * args , tag = 'p' , classes =[], ** kwargs ): super (). __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value ) Ancestors (in MRO) SimpleDashboard.elements.element.Element Methods append_child def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html ) get_element def get_element ( self ) View Source def get_element ( self ): return self . html get_html def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' ) get_js def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js register def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio ) update def update ( self , value ) View Source def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html )","title":"Paragraph"},{"location":"reference/SimpleDashboard/elements/paragraph/#module-simpledashboardelementsparagraph","text":"View Source from .element import Element class Paragraph ( Element ): def __init__ ( self , value , * args , tag = 'p' , classes = [], ** kwargs ): super () . __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value )","title":"Module SimpleDashboard.elements.paragraph"},{"location":"reference/SimpleDashboard/elements/paragraph/#classes","text":"","title":"Classes"},{"location":"reference/SimpleDashboard/elements/paragraph/#paragraph","text":"class Paragraph ( value , * args , tag = 'p' , classes = [], ** kwargs ) View Source class Paragraph ( Element ): def __init__ ( self , value , * args , tag = 'p' , classes =[], ** kwargs ): super (). __init__ ( tag , classes , * args , ** kwargs ) self . html . text = self . _generate_inner_html ( value )","title":"Paragraph"},{"location":"reference/SimpleDashboard/elements/paragraph/#ancestors-in-mro","text":"SimpleDashboard.elements.element.Element","title":"Ancestors (in MRO)"},{"location":"reference/SimpleDashboard/elements/paragraph/#methods","text":"","title":"Methods"},{"location":"reference/SimpleDashboard/elements/paragraph/#append_child","text":"def append_child ( self , child ) View Source def append_child ( self , child ): self . children . append ( child ) child . register ( self . socketio ) self . html . append ( child . html )","title":"append_child"},{"location":"reference/SimpleDashboard/elements/paragraph/#get_element","text":"def get_element ( self ) View Source def get_element ( self ): return self . html","title":"get_element"},{"location":"reference/SimpleDashboard/elements/paragraph/#get_html","text":"def get_html ( self ) View Source def get_html ( self ): return self . et . tostring ( self . html , encoding = 'utf8' , method = 'html' ). decode ( 'UTF-8' )","title":"get_html"},{"location":"reference/SimpleDashboard/elements/paragraph/#get_js","text":"def get_js ( self ) View Source def get_js ( self ): js = copy . copy ( self . js ) for child in self . children : js += child . get_js () + '\\n' return js","title":"get_js"},{"location":"reference/SimpleDashboard/elements/paragraph/#register","text":"def register ( self , socketio ) View Source def register ( self , socketio ): if socketio is not None : if self . registered is False : self . socketio = socketio self . _on_register () self . registered = True for child in self . children : child . register ( self . socketio )","title":"register"},{"location":"reference/SimpleDashboard/elements/paragraph/#update","text":"def update ( self , value ) View Source def update ( self , value ): inner_html = self . _generate_inner_html ( value ) self . html . text = inner_html self . socketio . emit ( str ( self . id ) + '_update' , inner_html )","title":"update"},{"location":"reference/SimpleDashboard/tools/","text":"Module SimpleDashboard.tools View Source from .poller import Poller Sub-modules SimpleDashboard.tools.poller","title":"Index"},{"location":"reference/SimpleDashboard/tools/#module-simpledashboardtools","text":"View Source from .poller import Poller","title":"Module SimpleDashboard.tools"},{"location":"reference/SimpleDashboard/tools/#sub-modules","text":"SimpleDashboard.tools.poller","title":"Sub-modules"},{"location":"reference/SimpleDashboard/tools/poller/","text":"Module SimpleDashboard.tools.poller View Source import eventlet class Poller (): def __init__ ( self , function , element , interval = 1 ): self . function = function self . element = element self . interval = interval self . active = False self . thread = None def poll ( self ): while True : self . element . update ( * ( self . function ())) eventlet . sleep ( self . interval ) def start ( self ): if self . active is False : self . thread = eventlet . greenthread . spawn ( self . poll ) self . active = True else : print ( 'Thread already running!' ) def stop ( self ): if self . active : self . thread . kill () self . active = False else : print ( 'Thread not running!' ) Classes Poller class Poller ( function , element , interval = 1 ) View Source class Poller (): def __init__ ( self , function , element , interval = 1 ): self . function = function self . element = element self . interval = interval self . active = False self . thread = None def poll ( self ): while True: self . element . update (*( self . function ())) eventlet . sleep ( self . interval ) def start ( self ): if self . active is False: self . thread = eventlet . greenthread . spawn ( self . poll ) self . active = True else: print ( 'Thread already running!' ) def stop ( self ): if self . active: self . thread . kill () self . active = False else: print ( 'Thread not running!' ) Methods poll def poll ( self ) View Source def poll ( self ): while True : self . element . update ( * ( self . function ())) eventlet . sleep ( self . interval ) start def start ( self ) View Source def start ( self ): if self . active is False : self . thread = eventlet . greenthread . spawn ( self . poll ) self . active = True else : print ( 'Thread already running!' ) stop def stop ( self ) View Source def stop ( self ): if self . active : self . thread . kill () self . active = False else : print ( 'Thread not running!' )","title":"Poller"},{"location":"reference/SimpleDashboard/tools/poller/#module-simpledashboardtoolspoller","text":"View Source import eventlet class Poller (): def __init__ ( self , function , element , interval = 1 ): self . function = function self . element = element self . interval = interval self . active = False self . thread = None def poll ( self ): while True : self . element . update ( * ( self . function ())) eventlet . sleep ( self . interval ) def start ( self ): if self . active is False : self . thread = eventlet . greenthread . spawn ( self . poll ) self . active = True else : print ( 'Thread already running!' ) def stop ( self ): if self . active : self . thread . kill () self . active = False else : print ( 'Thread not running!' )","title":"Module SimpleDashboard.tools.poller"},{"location":"reference/SimpleDashboard/tools/poller/#classes","text":"","title":"Classes"},{"location":"reference/SimpleDashboard/tools/poller/#poller","text":"class Poller ( function , element , interval = 1 ) View Source class Poller (): def __init__ ( self , function , element , interval = 1 ): self . function = function self . element = element self . interval = interval self . active = False self . thread = None def poll ( self ): while True: self . element . update (*( self . function ())) eventlet . sleep ( self . interval ) def start ( self ): if self . active is False: self . thread = eventlet . greenthread . spawn ( self . poll ) self . active = True else: print ( 'Thread already running!' ) def stop ( self ): if self . active: self . thread . kill () self . active = False else: print ( 'Thread not running!' )","title":"Poller"},{"location":"reference/SimpleDashboard/tools/poller/#methods","text":"","title":"Methods"},{"location":"reference/SimpleDashboard/tools/poller/#poll","text":"def poll ( self ) View Source def poll ( self ): while True : self . element . update ( * ( self . function ())) eventlet . sleep ( self . interval )","title":"poll"},{"location":"reference/SimpleDashboard/tools/poller/#start","text":"def start ( self ) View Source def start ( self ): if self . active is False : self . thread = eventlet . greenthread . spawn ( self . poll ) self . active = True else : print ( 'Thread already running!' )","title":"start"},{"location":"reference/SimpleDashboard/tools/poller/#stop","text":"def stop ( self ) View Source def stop ( self ): if self . active : self . thread . kill () self . active = False else : print ( 'Thread not running!' )","title":"stop"}]}